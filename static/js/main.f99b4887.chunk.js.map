{"version":3,"sources":["types/FilterType.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["FilterType","TodoList","React","memo","todos","setSelectedTodoId","selectedTodoId","className","map","todo","id","completed","cn","title","type","onClick","TodoFilter","selectedFilter","selectFilterType","searchQuery","setSearchQuery","value","onChange","event","currentTarget","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","selectedTodo","closeTodo","useState","todoOwner","setTodoOwner","useEffect","userId","href","email","name","App","setTodos","isLoading","setIsLoading","isLoadError","setIsLoadError","todosStatusFilter","setTodosStatusFilter","catch","finally","visibleTodos","useMemo","filter","normalizedTitle","toLowerCase","normalizedQuery","split","Boolean","join","isTitleIncludesQuery","includes","find","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f99b4887.chunk.js","sourcesContent":["export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  setSelectedTodoId: (userId: number) => void;\n  selectedTodoId: number;\n};\n\nexport const TodoList: React.FC<Props> = React.memo(\n  ({\n    todos,\n    setSelectedTodoId,\n    selectedTodoId,\n  }) => (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => (\n          <tr data-cy=\"todo\" className=\"\" key={todo.id}>\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-success': todo.completed,\n                  'has-text-danger': !todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => setSelectedTodoId(todo.id)}\n              >\n                <span className=\"icon\">\n                  <i\n                    className={cn(\n                      'far',\n                      { 'fa-eye': todo.id !== selectedTodoId },\n                      { 'fa-eye-slash': todo.id === selectedTodoId },\n                    )}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  ),\n);\n","import React from 'react';\nimport { FilterType } from '../../types/FilterType';\n\ntype Props = {\n  selectedFilter: string;\n  selectFilterType: (selectedFilter: FilterType) => void;\n  searchQuery: string;\n  setSearchQuery: (query: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(\n  ({\n    selectedFilter,\n    selectFilterType,\n    searchQuery,\n    setSearchQuery,\n  }) => (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={(event) => {\n              selectFilterType(event.currentTarget.value as FilterType);\n            }}\n          >\n            <option value={FilterType.ALL}>All</option>\n            <option value={FilterType.ACTIVE}>Active</option>\n            <option value={FilterType.COMPLETED}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchQuery}\n          onChange={(event) => setSearchQuery(event.currentTarget.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {searchQuery && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => {\n                setSearchQuery('');\n                selectFilterType(FilterType.ALL);\n              }}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  ),\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  selectedTodo: Todo | null;\n  closeTodo: (userId: number) => void;\n};\n\nexport const TodoModal: React.FC<Props> = React.memo(\n  ({\n    selectedTodo,\n    closeTodo,\n  }) => {\n    const [todoOwner, setTodoOwner] = useState<User | null>(null);\n\n    useEffect(() => {\n      if (selectedTodo) {\n        getUser(selectedTodo.userId)\n          .then(setTodoOwner);\n      }\n    }, []);\n\n    return (\n      <div className=\"modal is-active\" data-cy=\"modal\">\n        <div className=\"modal-background\" />\n\n        {!todoOwner\n          ? (\n            <Loader />\n          )\n          : (\n            <div className=\"modal-card\">\n              <header className=\"modal-card-head\">\n                <div\n                  className=\"modal-card-title has-text-weight-medium\"\n                  data-cy=\"modal-header\"\n                >\n                  {`Todo #${selectedTodo?.id}`}\n                </div>\n\n                {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n                <button\n                  type=\"button\"\n                  className=\"delete\"\n                  data-cy=\"modal-close\"\n                  onClick={() => closeTodo(0)}\n                />\n              </header>\n\n              <div className=\"modal-card-body\">\n                <p className=\"block\" data-cy=\"modal-title\">\n                  {selectedTodo?.title}\n                </p>\n\n                <p className=\"block\" data-cy=\"modal-user\">\n                  {selectedTodo?.completed\n                    ? (<strong className=\"has-text-success\">Done</strong>)\n                    : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n                  {' by '}\n\n                  <a href={`mailto: ${todoOwner.email}`}>\n                    {todoOwner.name}\n                  </a>\n                </p>\n              </div>\n            </div>\n          )}\n      </div>\n    );\n  },\n);\n","import React, { useEffect, useMemo, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterType';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isLoadError, setIsLoadError] = useState(false);\n  const [selectedTodoId, setSelectedTodoId] = useState(0);\n  const [todosStatusFilter, setTodosStatusFilter] = useState(FilterType.ALL);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  useEffect(() => {\n    getTodos()\n      .then(setTodos)\n      .catch(() => setIsLoadError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return todos.filter(todo => {\n      const normalizedTitle = todo.title.toLowerCase();\n      const normalizedQuery = searchQuery\n        .toLowerCase()\n        .split(' ')\n        .filter(Boolean)\n        .join(' ');\n\n      const isTitleIncludesQuery = normalizedTitle.includes(normalizedQuery);\n\n      switch (todosStatusFilter) {\n        case FilterType.ACTIVE:\n          return !todo.completed && isTitleIncludesQuery;\n\n        case FilterType.COMPLETED:\n          return todo.completed && isTitleIncludesQuery;\n\n        case FilterType.ALL:\n        default:\n          return isTitleIncludesQuery;\n      }\n    });\n  }, [todos, todosStatusFilter, searchQuery]);\n\n  const selectedTodo = useMemo(() => {\n    return visibleTodos.find(todo => (todo.id === selectedTodoId)) || null;\n  }, [visibleTodos, selectedTodoId]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                selectedFilter={todosStatusFilter}\n                selectFilterType={setTodosStatusFilter}\n                searchQuery={searchQuery}\n                setSearchQuery={setSearchQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading\n                ? (\n                  <Loader />\n                )\n                : (\n                  <TodoList\n                    todos={visibleTodos}\n                    setSelectedTodoId={setSelectedTodoId}\n                    selectedTodoId={selectedTodoId}\n                  />\n                )}\n\n              {isLoadError && (\n                <p>We are unable to load todos now, try again later</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodoId && (\n        <TodoModal\n          selectedTodo={selectedTodo}\n          closeTodo={setSelectedTodoId}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}